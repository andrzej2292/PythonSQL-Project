-- SELECT DISTINCT --

SELECT DISTINCT state
FROM customers;


-- WHERE --

SELECT *
FROM orders
WHERE order_date >= '2018-01-01';


-- OR AND NOT --

SELECT * 
FROM sql_store.customers
WHERE NOT
	(birth_date > '1990-01-01' OR points > 1000 AND state = "VA");
    

-- IN --

SELECT *
FROM products
WHERE quantity_in_stock IN (49, 38, 72);


-- BETWEEN --

SELECT *
FROM customers
WHERE birth_date BETWEEN '1990-01-01' AND '2000-01-01';


-- LIKE --

SELECT *
FROM customers
-- WHERE address LIKE '%trail%' OR address LIKE '%avenue%'
WHERE phone LIKE '%9';


-- IS NULL --

SELECT *
FROM orders
WHERE shipped_date IS NULL;


-- ORDER BY --

SELECT *, quantity * unit_price AS total_price
FROM order_items
WHERE order_id = 2
ORDER BY total_price DESC;


-- LIMIT --

SELECT *
FROM customers
WHERE NOT state = 'TX'
ORDER BY points DESC
LIMIT 5



-- REGEXP --

-- ^ beginning
-- $  end
-- | logical  "or"
-- x[abcdmz]x
-- x[a-f]x


SELECT *
FROM customers
-- WHERE first_name REGEXP 'elka|ambur'
-- WHERE last_name REGEXP 'ey$|on$'
-- WHERE last_name  REGEXP '^my|se'
WHERE last_name REGEXP 'b[ru]'




-- JOIN --

SELECT order_id, o.customer_id, first_name, last_name
FROM orders o
JOIN customers c 
	ON o.customer_id = c.customer_id;


-- JOINING ACROSS DATABASED --

SELECT *
FROM order_items oi
JOIN sql_inventory.products p
	ON oi.product_id = p.product_id;


-- SELF JOIN --

USE sql_hr;

SELECT e.first_name, e.last_name, m.first_name, m.last_name
FROM employees e
JOIN employees m
	ON e.reports_to = m.employee_id;


-- JOINING MULTIPLE TABLES --

SELECT
	o.order_id,
	o.order_date,
	c.first_name,
	c.last_name,
os.name
FROM orders o
JOIN customers c 
	ON o.customer_id = c.customer_id
JOIN order_statuses os
	ON o.status = os.order_status_id;

SELECT 
	p.date,
	p.amount,
	c.name,
	pm.name
FROM payments p
JOIN clients c
	ON p.client_id = c.client_id
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id;
    
    
-- COMPOUND JOIN CONDITIONS --

SELECT *
FROM order_items oi
JOIN order_item_notes oin
	ON oi.order_Id = oin.order_Id
	AND oi.product_id = oin.product_id;


-- IMPLICIT JOIN SYNTAX (better not use)

SELECT *
FROM orders o, customers c
WHERE o.customer_id = c.customer_id




-- OUTER JOINS --

SELECT
	c.customer_id,
	c.first_name,
	o.order_id
FROM customers c
LEFT JOIN orders o
	ON c.customer_id = o.customer_id
ORDER BY c.customer_id;


-- OUTER JOINS BETWEEN MULTIPLE TABLES --

SELECT 
	c.customer_id,
	c.first_name,
	o.order_id,
	s.name AS shipper
FROM customers c
LEFT JOIN orders o
	ON c.customer_id = o.customer_id
LEFT JOIN shippers s
	ON o.shipper_id = s.shipper_id;

SELECT 
	o.order_date,
	o.order_id,
	c.first_name,
	sh.name AS shipper,
	os.name AS status
FROM orders o
LEFT JOIN customers c
	ON o.customer_id = c.customer_id
LEFT JOIN shippers sh
	ON o.shipper_id = sh.shipper_id
LEFT JOIN order_statuses os
	ON o.status = os.order_status_id;
  
  
-- SELF OUTER JOINS --

USE sql_hr;

SELECT
	e.employee_id,
	e.first_name,
	m.first_name AS manager
FROM employees e
LEFT JOIN employees m
	ON e.reports_to = m.employee_id



-- THE USING CLAUSE --

USE sql_store;

SELECT
	o.order_id,
	c.first_name,
    sh.name AS shipper
FROM orders o 
JOIN customers c 
	USING (customer_id)
LEFT JOIN shippers sh
	USING (shipper_id);


SELECT *
FROM order_items  oi
JOIN order_item_notes oin
	USING (order_id, product_id);


USE sql_invoicing;

SELECT
	p.date,
	c.name AS client,
	p.amount,
	pm.name AS payment_method
FROM payments p
JOIN clients c
	USING (client_id)
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id;
    
    
-- NATURAL JOINS (not recommended) --

SELECT
	o.order_id,
	c.first_name
FROM orders o
NATURAL JOIN customers c;


-- CROSS JOINS (not recommended)

SELECT *
FROM shippers sh
CROSS JOIN products p;

-- use this one:
SELECT *
FROM shippers sh, products p



-- UNIONS --

SELECT
	o.order_id,
	o.order_date,
	'ACTIVE' AS status
FROM orders o
WHERE  o.order_date >= '2019-01-01'
UNION
SELECT
	o.order_id,
	o.order_date,
'ARCHIVED' AS status
FROM orders o
WHERE  o.order_date < '2019-01-01';


SELECT 
	first_name
FROM customers
UNION
SELECT
	name
FROM
	shippers;


SELECT
	customer_id,
	first_name,
    points,
	'Bronze' AS type 
FROM customers c
WHERE points < 2000
UNION
SELECT
	customer_id,
	first_name,
    points,
	'Silver' AS type
    FROM customers c
WHERE points BETWEEN 2000 AND 3000
UNION
SELECT
	customer_id,
	first_name,
    points,
	'Gold' AS type
FROM customers c
WHERE points > 3000
ORDER BY first_name 



-- INSERTING A SINGLE ROW --

INSERT INTO customers 
VALUES (
	DEFAULT,
	'John',
	'Smith',
	'1990-01-01',
	NULL,
	'adress',
	'city',
	'CA',
	DEFAULT);


-- ANOTHER WAY --

INSERT INTO customers (
    last_name,
    first_name,
    birth_date,
    address,
    city,
    state)    
VALUES (
	DEFAULT,
	'Smith',
	'John',
	'1990-01-01',
	NULL,
	'adress',
	'city',
	'CA',
	DEFAULT);



-- INSERTING MULTIPLE ROWS --

INSERT INTO shippers (name)
VALUES  ('Shipper1'),
		('Shipper2'),
        ('Shipper3');
        
INSERT INTO products (name, quantity_in_stock, unit_price)
VALUES  ('product1', 2, 3),
		('product2', 3, 5),
        ('product3', 4, 8)



-- INSERTING HIERARCHICAL ROWS --

INSERT INTO orders (customer_id, order_date, status)
	VALUES (1, '2019-01-05', 1);
INSERT INTO order_items
VALUES
	(LAST_INSERT_ID(), 1, 1, 2.95),
    (LAST_INSERT_ID(), 2, 1, 3.95)



-- CREATING A COPY OF A TABLE --

CREATE TABLE orders_archived AS
SELECT * 
FROM orders;


INSERT INTO orders_archived
SELECT *
FROM orders
WHERE order_date < '2019-01-01';


CREATE TABLE invoices_archived AS
SELECT
	i.invoice_id,
	i.number,
	c.name AS client,
	i.invoice_total,
	i.payment_total
FROM invoices i
JOIN clients c
	USING (client_id)
WHERE NOT i.payment_date IS NULL



-- UPDATING A SINGLE ROW --

UPDATE invoices
SET payment_total = 10, 
	payment_date =  '2019-03-01'
WHERE invoice_id = 1;


UPDATE invoices
SET payment_total = DEFAULT, 
	payment_date =  DEFAULT
WHERE invoice_id = 1;


UPDATE invoices
SET payment_total = invoice_total  * 0.5,
	payment_date = due_date
WHERE invoice_id = 1;



-- UPDATING MULTIPLE ROWS --
  
UPDATE invoices
SET payment_total = invoice_total * 0.5,
	payment_date = due_date
WHERE client_id IN (3, 4);


USE sql_store;

UPDATE customers
SET points = points + 50
WHERE birth_date < '1990-01-01';


	
-- USING SUBQUERIES IN UPDATES --

UPDATE invoices
SET payment_total = invoice_total * 0.9,
	payment_date = due_date
WHERE client_id = 
	(SELECT client_id
	FROM clients
	WHERE name = 'Myworks');
                
                
UPDATE invoices
SET payment_total = invoice_total * 0.7
WHERE client_id IN   
	(SELECT client_id
	FROM clients
	WHERE state IN ('NY', 'CA'));

                
-- EXERCISE   --

UPDATE orders
SET comments = 'Gold Customer'
WHERE customer_id IN
	(SELECT customer_id
	FROM customers
	WHERE points >= 3000)



-- DELETING ROWS --

DELETE FROM invoices
WHERE client_id = (
		SELECT client_id
        FROM clients
        WHERE name = 'Myworks')



-- MAX MIN AVG SUM COUNT --

SELECT 
	MAX(payment_date) AS highest,
    MIN(invoice_total) AS lowest,
    AVG(invoice_total) AS average,
    SUM(invoice_total * 1.1) AS total,
    COUNT(invoice_total) AS number_of_invoices,
    COUNT(payment_date) AS number_of_payments,
    COUNT(*) AS total_records,
    COUNT(DISTINCT client_id) AS number_of_clients
FROM invoices
WHERE invoice_date > '2019-07-01';


-- EXERCISE --

SELECT
	'First half of 2019' AS date_range,
    SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total - payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date BETWEEN '2019-01-01' AND '2019-07-01'
UNION
SELECT
	'Second half of 2019' AS date_range,
    SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total - payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date BETWEEN '2019-07-01' AND '2019-12-31'
UNION
SELECT
	'Total' AS date_range,
    SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total -  payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date BETWEEN '2019-01-01' AND '2019-12-31'



-- GROUP BY --

SELECT
	client_id,
	SUM(invoice_total) AS total_sales
FROM invoices
WHERE invoice_date >= '2019-07-01'
GROUP BY client_id
ORDER BY total_sales DESC;

SELECT
	c.state,
    c.city,
    SUM(i.invoice_total) AS total_sales
FROM invoices i
JOIN clients c
	USING (client_id)
GROUP BY state, city;


-- EXERCISE -- POWTÓRZYC!!!

SELECT
	p.date,
    pm.name AS payment_method,
    SUM(p.amount) AS total_payments
FROM payments p
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
GROUP BY 
	date, 
    payment_method
ORDER BY 
	date ASC



-- HAVING --

SELECT
	client_id,
    SUM(invoice_total) AS total_sales,
    count(*) AS number_of_invoices
FROM invoices
-- WHERE - can be used before GROUP BY
GROUP BY client_id
HAVING total_sales > 500 AND number_of_invoices > 5;
-- HAVING can be used only for clouses in SELECT

    
-- EXERCISE --

SELECT
	c.customer_id,
    c.state,
    SUM(oi.quantity * oi.unit_price) AS amount_spent
FROM customers c
LEFT JOIN orders o
	USING (customer_id)
JOIN order_items oi
	USING (order_id)
GROUP BY
	c.customer_id,
    c.state
HAVING 
c.state = 'VA' AND amount_spent > 100



-- ROLLUP --

SELECT
	state,
    city,
    SUM(invoice_total) AS total_sales
FROM invoices i 
JOIN clients c USING (client_id)
GROUP BY state, city WITH ROLLUP;


-- EXERCISE -- powtórzyć!!!

SELECT
	pm.name AS payment_method,
    SUM(amount) AS total
FROM payments p
JOIN payment_methods pm ON p.payment_method = pm.payment_method_id
GROUP BY pm.name WITH ROLLUP;

-- WATCH OUT!!! when using WITH ROLLUP you need to use pm.name, NOT 'AS payment_method'



-- COMPLEX SUBQUERIES --

SELECT *
FROM products
WHERE unit_price > (
	SELECT
		unit_price
    FROM products
    WHERE product_id = 3);


-- EXERCISE --

USE sql_hr;

SELECT *
FROM employees
WHERE salary > (
	SELECT
		AVG(salary)
	FROM employees);
    


-- IN --


-- Find the products that have never been ordered --

SELECT *
FROM products
WHERE product_id NOT IN (
	SELECT DISTINCT
		product_id
	FROM order_items);


-- Find clients without invoices --

USE sql_invoicing;

SELECT *
FROM clients
WHERE client_id NOT IN (
	SELECT DISTINCT
		client_id
    FROM invoices
);
    
    
-- Find clients without invoices using JOIN --

SELECT *
FROM clients
LEFT JOIN invoices USING (client_id)
WHERE invoice_id IS NULL;


-- Find customers who have ordered lettuce (id = 3), using JOIN and then subqueries

USE sql_store;

SELECT DISTINCT 
	customer_id,
    first_name,
    last_name
FROM customers
LEFT JOIN orders USING (customer_id)
LEFT JOIN order_items USING (order_id)
WHERE product_id =  3;


SELECT
	customer_id,
    first_name,
    last_name
FROM customers
WHERE customer_id IN (
	SELECT 
		customer_id
	FROM orders
	WHERE order_id IN (
		SELECT
			order_id
		FROM order_items
        WHERE product_id = 3)
);
	


-- ALL --


USE sql_invoicing;

SELECT *
FROM invoices
WHERE invoice_total > (
	SELECT
		MAX(invoice_total)
	FROM invoices
	WHERE client_id = 3
);


SELECT *
FROM invoices
WHERE invoice_total > ALL (
	SELECT invoice_total
    FROM invoices
    WHERE client_id = 3);

    

--  ANY --

-- Select clients with at least two invoices --

USE sql_invoicing;

SELECT *
FROM clients
WHERE client_id IN (
	SELECT 
		client_id
	FROM invoices
	GROUP BY client_id
	HAVING COUNT(client_id) >= 2
);


-- You can also use '=ANY' instead of 'IN' 


SELECT *
FROM clients
WHERE client_id = ANY (
	SELECT 
		client_id
	FROM invoices
	GROUP BY client_id
	HAVING COUNT(client_id) >= 2
);



