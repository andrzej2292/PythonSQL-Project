Skrypt do stworzenie baz użytych w tym kursie:

http://bit.ly/2LNdvCd


-- SELECT DISTINCT --

SELECT DISTINCT state
FROM customers;


-- WHERE --

SELECT *
FROM orders
WHERE order_date >= '2018-01-01';


-- OR AND NOT --

SELECT * 
FROM sql_store.customers
WHERE NOT
	(birth_date > '1990-01-01' OR points > 1000 AND state = "VA");
    

-- IN --

SELECT *
FROM products
WHERE quantity_in_stock IN (49, 38, 72);


-- BETWEEN --

SELECT *
FROM customers
WHERE birth_date BETWEEN '1990-01-01' AND '2000-01-01';


-- LIKE --

SELECT *
FROM customers
-- WHERE address LIKE '%trail%' OR address LIKE '%avenue%'
WHERE phone LIKE '%9';


-- IS NULL --

SELECT *
FROM orders
WHERE shipped_date IS NULL;


-- ORDER BY --

SELECT *, quantity * unit_price AS total_price
FROM order_items
WHERE order_id = 2
ORDER BY total_price DESC;


-- LIMIT --

SELECT *
FROM customers
WHERE NOT state = 'TX'
ORDER BY points DESC
LIMIT 5



-- REGEXP --

-- ^ beginning
-- $  end
-- | logical  "or"
-- x[abcdmz]x
-- x[a-f]x


SELECT *
FROM customers
-- WHERE first_name REGEXP 'elka|ambur'
-- WHERE last_name REGEXP 'ey$|on$'
-- WHERE last_name  REGEXP '^my|se'
WHERE last_name REGEXP 'b[ru]'




-- JOIN --

SELECT order_id, o.customer_id, first_name, last_name
FROM orders o
JOIN customers c 
	ON o.customer_id = c.customer_id;


-- JOINING ACROSS DATABASED --

SELECT *
FROM order_items oi
JOIN sql_inventory.products p
	ON oi.product_id = p.product_id;


-- SELF JOIN --

USE sql_hr;

SELECT e.first_name, e.last_name, m.first_name, m.last_name
FROM employees e
JOIN employees m
	ON e.reports_to = m.employee_id;


-- JOINING MULTIPLE TABLES --

SELECT
	o.order_id,
	o.order_date,
	c.first_name,
	c.last_name,
os.name
FROM orders o
JOIN customers c 
	ON o.customer_id = c.customer_id
JOIN order_statuses os
	ON o.status = os.order_status_id;

SELECT 
	p.date,
	p.amount,
	c.name,
	pm.name
FROM payments p
JOIN clients c
	ON p.client_id = c.client_id
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id;
    
    
-- COMPOUND JOIN CONDITIONS --

SELECT *
FROM order_items oi
JOIN order_item_notes oin
	ON oi.order_Id = oin.order_Id
	AND oi.product_id = oin.product_id;


-- IMPLICIT JOIN SYNTAX (better not use)

SELECT *
FROM orders o, customers c
WHERE o.customer_id = c.customer_id




-- OUTER JOINS --

SELECT
	c.customer_id,
	c.first_name,
	o.order_id
FROM customers c
LEFT JOIN orders o
	ON c.customer_id = o.customer_id
ORDER BY c.customer_id;


-- OUTER JOINS BETWEEN MULTIPLE TABLES --

SELECT 
	c.customer_id,
	c.first_name,
	o.order_id,
	s.name AS shipper
FROM customers c
LEFT JOIN orders o
	ON c.customer_id = o.customer_id
LEFT JOIN shippers s
	ON o.shipper_id = s.shipper_id;

SELECT 
	o.order_date,
	o.order_id,
	c.first_name,
	sh.name AS shipper,
	os.name AS status
FROM orders o
LEFT JOIN customers c
	ON o.customer_id = c.customer_id
LEFT JOIN shippers sh
	ON o.shipper_id = sh.shipper_id
LEFT JOIN order_statuses os
	ON o.status = os.order_status_id;
  
  
-- SELF OUTER JOINS --

USE sql_hr;

SELECT
	e.employee_id,
	e.first_name,
	m.first_name AS manager
FROM employees e
LEFT JOIN employees m
	ON e.reports_to = m.employee_id



-- THE USING CLAUSE --

USE sql_store;

SELECT
	o.order_id,
	c.first_name,
    sh.name AS shipper
FROM orders o 
JOIN customers c 
	USING (customer_id)
LEFT JOIN shippers sh
	USING (shipper_id);


SELECT *
FROM order_items  oi
JOIN order_item_notes oin
	USING (order_id, product_id);


USE sql_invoicing;

SELECT
	p.date,
	c.name AS client,
	p.amount,
	pm.name AS payment_method
FROM payments p
JOIN clients c
	USING (client_id)
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id;
    
    
-- NATURAL JOINS (not recommended) --

SELECT
	o.order_id,
	c.first_name
FROM orders o
NATURAL JOIN customers c;


-- CROSS JOINS (not recommended)

SELECT *
FROM shippers sh
CROSS JOIN products p;

-- use this one:
SELECT *
FROM shippers sh, products p



-- UNIONS --

SELECT
	o.order_id,
	o.order_date,
	'ACTIVE' AS status
FROM orders o
WHERE  o.order_date >= '2019-01-01'
UNION
SELECT
	o.order_id,
	o.order_date,
'ARCHIVED' AS status
FROM orders o
WHERE  o.order_date < '2019-01-01';


SELECT 
	first_name
FROM customers
UNION
SELECT
	name
FROM
	shippers;


SELECT
	customer_id,
	first_name,
    points,
	'Bronze' AS type 
FROM customers c
WHERE points < 2000
UNION
SELECT
	customer_id,
	first_name,
    points,
	'Silver' AS type
    FROM customers c
WHERE points BETWEEN 2000 AND 3000
UNION
SELECT
	customer_id,
	first_name,
    points,
	'Gold' AS type
FROM customers c
WHERE points > 3000
ORDER BY first_name 



-- INSERTING A SINGLE ROW --

INSERT INTO customers 
VALUES (
	DEFAULT,
	'John',
	'Smith',
	'1990-01-01',
	NULL,
	'adress',
	'city',
	'CA',
	DEFAULT);


-- ANOTHER WAY --

INSERT INTO customers (
    last_name,
    first_name,
    birth_date,
    address,
    city,
    state)    
VALUES (
	DEFAULT,
	'Smith',
	'John',
	'1990-01-01',
	NULL,
	'adress',
	'city',
	'CA',
	DEFAULT);



-- INSERTING MULTIPLE ROWS --

INSERT INTO shippers (name)
VALUES  ('Shipper1'),
		('Shipper2'),
        ('Shipper3');
        
INSERT INTO products (name, quantity_in_stock, unit_price)
VALUES  ('product1', 2, 3),
		('product2', 3, 5),
        ('product3', 4, 8)



-- INSERTING HIERARCHICAL ROWS --

INSERT INTO orders (customer_id, order_date, status)
	VALUES (1, '2019-01-05', 1);
INSERT INTO order_items
VALUES
	(LAST_INSERT_ID(), 1, 1, 2.95),
    (LAST_INSERT_ID(), 2, 1, 3.95)



-- CREATING A COPY OF A TABLE --

CREATE TABLE orders_archived AS
SELECT * 
FROM orders;


INSERT INTO orders_archived
SELECT *
FROM orders
WHERE order_date < '2019-01-01';


CREATE TABLE invoices_archived AS
SELECT
	i.invoice_id,
	i.number,
	c.name AS client,
	i.invoice_total,
	i.payment_total
FROM invoices i
JOIN clients c
	USING (client_id)
WHERE NOT i.payment_date IS NULL



-- UPDATING A SINGLE ROW --

UPDATE invoices
SET payment_total = 10, 
	payment_date =  '2019-03-01'
WHERE invoice_id = 1;


UPDATE invoices
SET payment_total = DEFAULT, 
	payment_date =  DEFAULT
WHERE invoice_id = 1;


UPDATE invoices
SET payment_total = invoice_total  * 0.5,
	payment_date = due_date
WHERE invoice_id = 1;



-- UPDATING MULTIPLE ROWS --
  
UPDATE invoices
SET payment_total = invoice_total * 0.5,
	payment_date = due_date
WHERE client_id IN (3, 4);


USE sql_store;

UPDATE customers
SET points = points + 50
WHERE birth_date < '1990-01-01';


	
-- USING SUBQUERIES IN UPDATES --

UPDATE invoices
SET payment_total = invoice_total * 0.9,
	payment_date = due_date
WHERE client_id = 
	(SELECT client_id
	FROM clients
	WHERE name = 'Myworks');
                
                
UPDATE invoices
SET payment_total = invoice_total * 0.7
WHERE client_id IN   
	(SELECT client_id
	FROM clients
	WHERE state IN ('NY', 'CA'));

                
-- EXERCISE   --

UPDATE orders
SET comments = 'Gold Customer'
WHERE customer_id IN
	(SELECT customer_id
	FROM customers
	WHERE points >= 3000)



-- DELETING ROWS --

DELETE FROM invoices
WHERE client_id = (
		SELECT client_id
        FROM clients
        WHERE name = 'Myworks')



-- MAX MIN AVG SUM COUNT --

SELECT 
	MAX(payment_date) AS highest,
    MIN(invoice_total) AS lowest,
    AVG(invoice_total) AS average,
    SUM(invoice_total * 1.1) AS total,
    COUNT(invoice_total) AS number_of_invoices,
    COUNT(payment_date) AS number_of_payments,
    COUNT(*) AS total_records,
    COUNT(DISTINCT client_id) AS number_of_clients
FROM invoices
WHERE invoice_date > '2019-07-01';


-- EXERCISE --

SELECT
	'First half of 2019' AS date_range,
    SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total - payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date BETWEEN '2019-01-01' AND '2019-07-01'
UNION
SELECT
	'Second half of 2019' AS date_range,
    SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total - payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date BETWEEN '2019-07-01' AND '2019-12-31'
UNION
SELECT
	'Total' AS date_range,
    SUM(invoice_total) AS total_sales,
    SUM(payment_total) AS total_payments,
    SUM(invoice_total -  payment_total) AS what_we_expect
FROM invoices
WHERE invoice_date BETWEEN '2019-01-01' AND '2019-12-31'



-- GROUP BY --

SELECT
	client_id,
	SUM(invoice_total) AS total_sales
FROM invoices
WHERE invoice_date >= '2019-07-01'
GROUP BY client_id
ORDER BY total_sales DESC;

SELECT
	c.state,
    c.city,
    SUM(i.invoice_total) AS total_sales
FROM invoices i
JOIN clients c
	USING (client_id)
GROUP BY state, city;


-- EXERCISE -- POWTÓRZYC!!!

SELECT
	p.date,
    pm.name AS payment_method,
    SUM(p.amount) AS total_payments
FROM payments p
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
GROUP BY 
	date, 
    payment_method
ORDER BY 
	date ASC



-- HAVING --

SELECT
	client_id,
    SUM(invoice_total) AS total_sales,
    count(*) AS number_of_invoices
FROM invoices
-- WHERE - can be used before GROUP BY
GROUP BY client_id
HAVING total_sales > 500 AND number_of_invoices > 5;
-- HAVING can be used only for clouses in SELECT

    
-- EXERCISE --

SELECT
	c.customer_id,
    c.state,
    SUM(oi.quantity * oi.unit_price) AS amount_spent
FROM customers c
LEFT JOIN orders o
	USING (customer_id)
JOIN order_items oi
	USING (order_id)
GROUP BY
	c.customer_id,
    c.state
HAVING 
c.state = 'VA' AND amount_spent > 100



-- ROLLUP --

SELECT
	state,
    city,
    SUM(invoice_total) AS total_sales
FROM invoices i 
JOIN clients c USING (client_id)
GROUP BY state, city WITH ROLLUP;


-- EXERCISE -- powtórzyć!!!

SELECT
	pm.name AS payment_method,
    SUM(amount) AS total
FROM payments p
JOIN payment_methods pm ON p.payment_method = pm.payment_method_id
GROUP BY pm.name WITH ROLLUP;

-- WATCH OUT!!! when using WITH ROLLUP you need to use pm.name, NOT 'AS payment_method'



-- COMPLEX SUBQUERIES --

SELECT *
FROM products
WHERE unit_price > (
	SELECT
		unit_price
    FROM products
    WHERE product_id = 3);


-- EXERCISE --

USE sql_hr;

SELECT *
FROM employees
WHERE salary > (
	SELECT
		AVG(salary)
	FROM employees);
    


-- CORRELATED SUBQUERIES --


-- Select employees whose salary is above the average in their office

USE sql_hr;

SELECT *
FROM employees e
WHERE salary > (
	SELECT AVG(salary)
    FROM employees e2
    WHERE e2.office_id = e.office_id
);



-- EXERCISE --

-- Get invoices that are larger than the client's average invoice amount

USE sql_invoicing;

SELECT *
FROM invoices i
WHERE invoice_total > (
	SELECT AVG(invoice_total)
    FROM invoices i2
    WHERE i2.client_id = i.client_id
)
ORDER BY invoice_id



-- The EXISTS Operator

 
-- Select clients that have an invoice

USE sql_invoicing;

-- IN

SELECT
	name
FROM clients
WHERE client_id IN (
	SELECT DISTINCT i.client_id
    FROM invoices i
);


-- JOIN

SELECT
	name
FROM invoices
LEFT JOIN clients USING (client_id)
GROUP BY client_id;


-- EXISTS

SELECT *
FROM clients c
WHERE EXISTS (
	SELECT *
    FROM invoices i
    WHERE i.client_id = c.client_id
);

-- use EXISTS operator when there is a lot of data, as it is more efficient



-- EXERCISE --

-- Find the products that have never been ordered

USE sql_store;

SELECT *
FROM products p
WHERE NOT EXISTS (
	SELECT *
    FROM order_items oi
    WHERE oi.product_id = p.product_id
);




-- Subqueries in the SELECT clause -- 


SELECT
	invoice_id,
    invoice_total,
    (SELECT AVG(invoice_total)
    FROM invoices) AS invoice_average,
    invoice_total - (SELECT invoice_average) AS difference
FROM invoices;

select * from customers
-- EXERCISE -- 


SELECT
	client_id,
    name,
    (SELECT SUM(invoice_total)
    FROM invoices i
    WHERE i.client_id = c.client_id) AS total_sales,
    (SELECT AVG(invoice_total)
    FROM invoices) AS average,
    (SELECT total_sales - average)
FROM clients c;



-- Subqueries in the FROM Clause --

SELECT *
FROM (
	SELECT
		client_id,
		name,
		(SELECT SUM(invoice_total)
			FROM invoices i
			WHERE i.client_id = c.client_id) AS total_sales,
		(SELECT AVG(invoice_total)
			FROM invoices) AS average,
		(SELECT total_sales - average) AS difference
	FROM clients c
) AS sales_summary
WHERE total_sales IS NOT NULL

-- subquery in FROM clause ALLWAYS need to have an allias



-- Numeric Functions and String Functions --

-- ROUND --

SELECT ROUND(5.73, 1);
SELECT ROUND(5.7355, 2);


-- TRUNCATE --
 
SELECT TRUNCATE(5.7355, 3);


-- CEILING --

SELECT CEILING(5.7);
SELECT CEILING(5.2);


-- FLOOR --

SELECT FLOOR(5.7);
SELECT FLOOR(5.2);


-- ABS --

SELECT ABS(5.2);
SELECT ABS(-5.2);


-- RAND --

SELECT RAND();



-- String Functions --

-- LENGTH --

SELECT LENGTH('sky');


-- UPPER LOWER --

SELECT UPPER('sky');
SELECT LOWER('sky');


-- TRIM --

SELECT LTRIM('     sky');
SELECT RTRIM('sky     ');


--  LEFT RIGHT --

SELECT LEFT('Kindergarten', 4);
SELECT RIGHT('Kindergarten', 4);


--  SUBSTRING --

SELECT SUBSTRING('Kindergarten', 7, 5);
SELECT SUBSTRING('Kindergarten', 2);


-- LOCATE --

SELECT LOCATE('n', 'Kindergarten');
SELECT LOCATE('q', 'Kindergarten');
SELECT LOCATE('garten', 'Kindergarten');


-- REPLACE --

SELECT REPLACE('Kindergarten', 'garten', 'garden');


-- CONCAT --

SELECT CONCAT('first', 'last');

USE sql_store;

SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM customers



-- Date Functions and Formatting --

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'MyNewPass';


SELECT 
	NOW(),
    CURDATE(),
    CURTIME();
    
  
SELECT YEAR(NOW());
SELECT MONTH(NOW());
SELECT DAY(NOW());
SELECT HOUR(NOW());
SELECT MINUTE(NOW());
SELECT SECOND(NOW());
SELECT DAYNAME(NOW());
SELECT MONTHNAME(NOW());


-- EXTRACT --

SELECT EXTRACT(YEAR FROM NOW());


-- EXERCISE --
-- powtórzyć, nie wpadłem sam na rozwiązanie

USE sql_store;

SELECT *
FROM orders
WHERE YEAR(order_date) = YEAR(NOW());



-- Data Format Formatting --

SELECT DATE_FORMAT(NOW(), '%m %d %y');
SELECT DATE_FORMAT(NOW(), '%M %D %Y');
SELECT TIME_FORMAT(NOW(), '%H:%i %P');



-- Calculating Dates And Times --

SELECT DATE_ADD(NOW(), INTERVAL 1 YEAR);
SELECT DATE_SUB(NOW(), INTERVAL 1 YEAR);

SELECT DATEDIFF('2019-01-05', '2019-01-01');

SELECT TIME_TO_SEC('09:00') - TIME_TO_SEC('09:02')



-- The IF, IFNULL and COALESCE Functions --

USE sql_store;


-- IF --

SELECT
	order_id,
    order_date,
    IF(YEAR(order_date) = YEAR(NOW()), 'Active', 'Archived') AS category
FROM orders;


-- EXERCISE --
-- 18.02.2020 - powtorzyc, bardzo fajne cwiczenie, warto zrozumiec
-- 22.02.2020 - jest lepiej, ale jeszcze w przyszlosci powtorzyc


SELECT
	product_id,
    name,
    (SELECT COUNT(product_id)
		FROM order_items oi
		WHERE oi.product_id = p.product_id) AS orders,
    IF((SELECT COUNT(product_id)
		FROM order_items oi
		WHERE oi.product_id = p.product_id) > 1, 'Many times', 'Once') AS frequency
FROM products p;

-- niby działa, ale jednak nie do końca - długie i wyszukuje produkty z 0 orders

SELECT
	product_id,
    name,
    COUNT(*) AS orders,
    IF(COUNT(*) > 1, 'Many times', 'Once') AS frequency
FROM products
JOIN order_items USING (product_id)
GROUP BY product_id, name;

-- prostsze, bardziej przejrzyste i eleiminuje 0



-- IFNULL and COALESCE --

SELECT
	order_id,
    IFNULL(shipper_id, 'Not assigned') AS shipper
FROM orders;

SELECT
	order_id,
    COALESCE(shipper_id, comments, 'Not assigned') AS shipper
FROM orders;


--  EXERCISE --

SELECT
	CONCAT(first_name, ' ', last_name) AS customer,
    COALESCE(phone, 'Unknown') AS phone
FROM customers




-- The Case Operator --

SELECT
	order_id,
    order_date,
    CASE
		WHEN YEAR(order_date) = YEAR(NOW()) THEN 'Active'
        WHEN YEAR(order_date) = YEAR(NOW()) -1 THEN 'Last Year'
        WHEN YEAR(order_date) = YEAR(NOW()) -2 THEN 'Last 2 Years'
		WHEN YEAR(order_date) < YEAR(NOW()) -2 THEN 'Archived'
        ELSE 'Future'
	END AS 'status'
FROM orders;


-- EXERCISE --

SELECT
	CONCAT(first_name, ' ', last_name) AS customer,
    points,
    CASE
		WHEN points >= 3000 THEN 'Gold'
		WHEN points >= 2000 THEN 'Silver'
        ELSE 'Bronze'
	END AS category
FROM customers
ORDER BY points DESC 



-- VIEWS --


USE sql_invoicing;

CREATE VIEW sales_by_client2 AS
SELECT
	c.client_id,
    c.name,
    SUM(invoice_total) AS total_sales
FROM clients c
JOIN invoices i USING (client_id)
GROUP BY client_id, name;

SELECT *
FROM sales_by_client2
JOIN clients USING  (client_id)
ORDER BY total_sales DESC;


-- EXERCISE --
-- 22.02.2020 jebłem się, powtórzyć

CREATE VIEW clients_balance AS
SELECT
	c.client_id,
    c.name,
    SUM(invoice_total - payment_total) AS balance
FROM clients c
JOIN invoices i USING (client_id)
GROUP BY client_id, name;

SELECT *
FROM clients_balance;



-- Altering Or Dropping VIEWS --


DROP VIEW sales_by_client;

CREATE OR REPLACE VIEW clients_balance AS
SELECT
	c.client_id,
    c.name,
    SUM(invoice_total - payment_total) AS balance
FROM clients c
JOIN invoices i USING (client_id)
GROUP BY client_id, name;



-- Updatable VIEWS --

-- For the view to be updatable it CAN'T have any of the following:
-- DISTINCT
-- Aggregate Functions (MIN, MAX, SUM)
-- GROUP BY / HAVING
-- UNION


CREATE OR REPLACE VIEW invoices_with_balance AS
SELECT
	invoice_id,
    number,
    client_id,
    invoice_total,
    payment_total,
    invoice_total - payment_total AS balance,
    invoice_date,
    due_date,
    payment_date
FROM invoices
WHERE (invoice_total - payment_total) > 0;


DELETE FROM invoices_with_balance
WHERE invoice_id = 1;


UPDATE invoices_with_balance
SET due_date = DATE_ADD(due_date, INTERVAL 2 DAY)
WHERE invoice_id = 2;



-- The WITH CHECK OPTION Clause --


CREATE OR REPLACE VIEW invoices_with_balance AS
SELECT
	invoice_id,
    number,
    client_id,
    invoice_total,
    payment_total,
    invoice_total - payment_total AS balance,
    invoice_date,
    due_date,
    payment_date
FROM invoices
WHERE (invoice_total - payment_total) > 0
WITH CHECK OPTION;

UPDATE invoices_with_balance
SET payment_total = invoice_total
WHERE invoice_id = 3



-- Other Benefits Of VIEWS --



-- Stored Procedures ----


DELIMITER $$
CREATE PROCEDURE get_clients()
BEGIN
	SELECT * FROM clients;
END$$

DELIMITER ;

CALL get_clients();



-- exercise --


DELIMITER $$
CREATE PROCEDURE get_invoices_with_balance()
BEGIN
	SELECT
		invoice_id,
		invoice_total - payment_total AS balance
	FROM invoices
	WHERE invoice_total - payment_total > 0;
END$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE get_invoices_with_balance()
BEGIN
	SELECT *
	FROM invoices_with_balance
	WHERE balance > 0;
END$$
DELIMITER ;


CALL get_invoices_with_balance();

-- Można także tworzyć procedury z poziomu Schemas -> Stored Procedure -> Create Stored Procedure. Jest to nieco łatwiejsze i szybsze



-- Dropping Stored Procedures ----


DROP PROCEDURE IF EXISTS get_clients;

DELIMITER $$
CREATE PROCEDURE get_clients()
BEGIN
	SELECT * 
    FROM clients;
END $$

DELIMITER ;

-- Powyższe DROP i CREATE zostały zapisane w pliku. Dzięki temu można w łatwy sposób "zresetować" wprowadzone zmiany lub udostępnić daną procedurę współpracownikowi



-- PARAMETERS ----


DROP PROCEDURE IF EXISTS get_clients_by_state;

DELIMITER $$
CREATE PROCEDURE get_clients_by_state (state CHAR(2))
BEGIN
	SELECT * 
    FROM clients c
    WHERE c.state = state;
END $$

DELIMITER ;

CALL get_clients_by_state ('CA');


-- exercise --
	-- 22.02.2020 w sumie to wyszlo spoko, ale uważać na : oraz $$, a także pamietać o dodawaniu parametru przed CHAR(x)

DROP PROCEDURE IF EXISTS get_invoices_by_client;

DELIMITER $$
CREATE PROCEDURE get_invoices_by_client (client_id INT) -- ale moze tez byc CHAR
BEGIN
	SELECT *
	FROM invoices i
    WHERE i.client_id = client_id;
END $$

DELIMITER ;

CALL get_invoices_by_client ('2');

-- warto tworzyc procedures poprzez zakladke Stored Procedures



-- PARAMETERS With Default Value --


-- how to set CA as a default parameter

DROP PROCEDURE IF EXISTS get_clients_by_state;

DELIMITER $$
CREATE PROCEDURE get_clients_by_state(state CHAR(2))
BEGIN
	IF state IS NULL THEN
		SET state = 'CA';
	END IF;
    
	SELECT *
	FROM clients c
	WHERE c.state = state;
	
END $$

DELIMITER ;

CALL get_clients_by_state (NULL);


-- how to set 'show all clients' in case when PARAMETER is not provided

DROP PROCEDURE IF EXISTS get_clients_by_state;

DELIMITER $$
CREATE PROCEDURE get_clients_by_state (state CHAR(2))
BEGIN
	IF state IS NULL THEN
		SELECT *
        FROM clients;
	ELSE
		SELECT *
		FROM clients c
        WHERE c.state =  state;
	END IF;
END $$

DECIMETER ;

CALL get_clients_by_state (NULL);


-- how to set ARGUMENT 'show all clients' in case when PARAMETER is not provided, but with less code and looking more professional

DROP PROCEDURE IF EXISTS get_clients_by_state;

DELIMITER $$
CREATE PROCEDURE get_clients_by_state (state CHAR(2))
BEGIN
	SELECT *
	FROM clients c
	WHERE c.state = IFNULL(state, c.state);
END $$

DELIMITER ;

CALL get_clients_by_state (NULL);


-- exercise

-- how to create a  procedure with 2 parameters, each with default ARGUMENTS "show all" set up

DROP PROCEDURE IF EXISTS get_payments;

DELIMITER $$
CREATE PROCEDURE get_payments (client_id INT, payment_method TINYINT)
BEGIN
	SELECT *
	FROM payments p
    WHERE 
		p.client_id = IFNULL(client_id, p.client_id) AND 
        p.payment_method = IFNULL(payment_method, p.payment_method);
END $$

DELIMITER ;

CALL get_payments (null, 2);



-- PARAMETER Validation --

-- upadating tables using PROCEDURES with PARAMETERS

USE sql_invoicing;
DROP procedure IF EXISTS make_payment;

DELIMITER $$
USE sql_invoicing$$
CREATE PROCEDURE make_payment (
	invoice_id INT,
    payment_amount DECIMAL (9, 2),
    payment_date DATE
)
BEGIN
	IF payment_amount < 0 THEN
		SIGNAL SQLSTATE '22003' SET MESSAGE_TEXT = 'invalid payment amount';
	END IF;
		
	UPDATE invoices i
    SET
		i.payment_total = payment_amount,
        i.payment_date = payment_date
	WHERE i.invoice_id = invoice_id;
END $$

DELIMITER ;

-- date trzeba podawac uzywaja ' ' inaczej wywala błąd
CALL make_payment (2, 100, '2019-01-01');
	


-- OUTput PARAMETERS --
 

USE sql_invoicing;
DROP procedure IF EXISTS get_unpaid_invoices_for_client ;

DELIMITER $$
USE sql_invoicing$$
CREATE PROCEDURE get_unpaid_invoices_for_client (client_id INT)
BEGIN
	SELECT 
		COUNT(*), 
        SUM(invoice_total)
	FROM invoices i
    WHERE i.client_id = client_id AND payment_total = 0;
END$$

DELIMITER ;

CALL get_unpaid_invoices_for_client(3);


-- inny sposob, nie wiem po co go pokazal skoro i tak odradza go uzywac, wiecej roboty
-- 23.02.2020 mozna jeszce kiedys to przejrzec na spokojnie, zeby upewnic sie ze wiem na czym polega roznica i o co w tym wszsytkim chodzi

USE sql_invoicing;
DROP procedure IF EXISTS sql_invoicing.get_unpaid_invoices_for_client_2;

DELIMITER $$
USE sql_invoicing$$
CREATE DEFINER=root@localhost PROCEDURE get_unpaid_invoices_for_client_2(
	client_id INT,
    OUT invoices_count INT,
    OUT invoices_total DECIMAL (9, 2)
)
BEGIN
	SELECT 
		COUNT(*), 
        SUM(invoice_total)
	INTO
		invoices_count,  
        invoices_total
	FROM invoices i
    WHERE i.client_id = client_id AND payment_total = 0;
END$$

DELIMITER ;

CALL get_unpaid_invoices_for_client_2 (3, 0, 0);



-- VARIABLES --

-- User or  session variables

SET @invoices_count = 0;


-- Local VARIABLES


USE sql_invoicing;

DROP procedure IF EXISTS get_risk_factor;

DELIMITER $$
USE sql_invoicing$$
CREATE PROCEDURE get_risk_factor ()
BEGIN
	DECLARE risk_factor DECIMAL(9,2) DEFAULT 0;
    DECLARE INVOICES_TOTAL decimal(9,2);
    DECLARE invoices_count INT;
    
    SELECT 
		COUNT(*), 
        SUM (invoice_total)
    INTO
		invoices_count,
        invoices_total
	FROM invoices;
    
    SET risk_factor = invoices_total / invoices_count * 5;
    
    SELECT risk_factor;
END$$

DELIMITER ;



-- FUNCTIONS --

-- 25.02.2020 powtorzyc bo przydatne

USE sql_invoicing;

DROP function IF EXISTS get_risk_factor_for_client;

DELIMITER $$
USE sql_invoicing$$
CREATE DEFINER=root@localhost FUNCTION get_risk_factor_for_client(client_id INT) RETURNS int(11)
    READS SQL DATA
BEGIN
	DECLARE risk_factor DECIMAL(9,2) DEFAULT 0;
    DECLARE invoices_total decimal(9,2);
    DECLARE invoices_count INT;
    
    SELECT 
		COUNT(*), 
        SUM(invoice_total)
    INTO
		invoices_count,
        invoices_total
	FROM invoices i
    WHERE i.client_id  =  client_id;
    
    SET risk_factor = invoices_total / invoices_count * 5 ;
    
RETURN IFNULL(risk_factor, 0);
END$$

DELIMITER ;

SELECT
	client_id,
    name,
    get_risk_factor_for_client(client_id) AS risk_factor
FROM clients;




CREATE TABLE dbo.Products
   (
      ProductID int  (1,1) NOT NULL
      , QtyAvailable smallint
      , UnitPrice money
      , InventoryValue AS QtyAvailable * UnitPrice
    )
;
-- Insert values into the table.
INSERT INTO dbo.Products (QtyAvailable, UnitPrice)
   VALUES (25, 2.00), (10, 1.5)
;
-- Display the rows in the table.
SELECT ProductID, QtyAvailable, UnitPrice, InventoryValue
FROM dbo.Products
;



-- COMPLEX SUBQUERIES --

SELECT *
FROM products
WHERE unit_price > (
	SELECT
		unit_price
    FROM products
    WHERE product_id = 3);


-- EXERCISE --

USE sql_hr;

SELECT *
FROM employees
WHERE salary > (
	SELECT
		AVG(salary)
	FROM employees);
    


-- IN --


-- Find the products that have never been ordered --

SELECT *
FROM products
WHERE product_id NOT IN (
	SELECT DISTINCT
		product_id
	FROM order_items);


-- Find clients without invoices --

USE sql_invoicing;

SELECT *
FROM clients
WHERE client_id NOT IN (
	SELECT DISTINCT
		client_id
    FROM invoices
);
    
    
-- Find clients without invoices using JOIN --

SELECT *
FROM clients
LEFT JOIN invoices USING (client_id)
WHERE invoice_id IS NULL;


-- Find customers who have ordered lettuce (id = 3), using JOIN and then subqueries 

USE sql_store;

SELECT DISTINCT 
	customer_id,
    first_name,
    last_name
FROM customers
LEFT JOIN orders USING (customer_id)
LEFT JOIN order_items USING (order_id)
WHERE product_id =  3;


SELECT
	customer_id,
    first_name,
    last_name
FROM customers
WHERE customer_id IN (
	SELECT 
		customer_id
	FROM orders
	WHERE order_id IN (
		SELECT
			order_id
		FROM order_items
        WHERE product_id = 3)
);
	


-- ALL --


USE sql_invoicing;

SELECT *
FROM invoices
WHERE invoice_total > (
	SELECT
		MAX(invoice_total)
	FROM invoices
	WHERE client_id = 3
);


SELECT *
FROM invoices
WHERE invoice_total > ALL (
	SELECT invoice_total
    FROM invoices
    WHERE client_id = 3);
    
    

--  ANY --

-- Select clients with at least two invoices --

USE sql_invoicing;

SELECT *
FROM clients
WHERE client_id IN (
	SELECT 
		client_id
	FROM invoices
	GROUP BY client_id
	HAVING COUNT(client_id) >= 2
);


-- You can also use '=ANY' instead of 'IN' 


SELECT *
FROM clients
WHERE client_id = ANY (
	SELECT 
		client_id
	FROM invoices
	GROUP BY client_id
	HAVING COUNT(client_id) >= 2
);


