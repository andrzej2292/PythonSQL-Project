# required: tkinter, reportlab, YahooFinancials, mysql.connector, re, datetime
# upgrade pip

# 2 below tables should be executed in MySQL:
# CREATE TABLE current_assets (
# name varchar(50),
# type varchar(50),
# amount int,
# value_per_unit_local_curr float,
# value_total_local_curr float
# last_modified_date date);
#
# CREATE TABLE operations_history (
# date_op date,
# name_op varchar(50),
# amount_op int);


from tkinter import *
from datetime import datetime
from datetime import date
from yahoofinancials import YahooFinancials
import mysql.connector
import csv
import re

mydb = mysql.connector.connect(user='root', password='MyNewPass',
                               host='127.0.0.1',
                               database='my_portfolio', auth_plugin='mysql_native_password')


root = Tk()
root.title("Welcome to LikeGeeks app")
root.geometry('500x500')
lbl = Label(root, text="Choose your local currency:")
lbl.grid(row=0, column=0)
# e = Entry(root, width=15, borderwidth=5)
# e.grid(row=1, column=0, padx=10, pady=10)
# e.insert(0, "Choose your local currency")
# txt = Entry(window, width=10)
# txt.grid(column=1, row(column=0, row=0)=0)

today = date.today()
output = ''
my_cursor = mydb.cursor(buffered=True)
command = ""

class Assets:

    def __init__(self, name, type, amount):
        self.name = name
        self.type = type
        self.amount = int(amount)

    def value_per_unit_local_curr(self):
        if self.type == 'currency':
            currencies = [f'{str.upper(self.name)}{str.upper(currency_local.get())}=X']
            if str.upper(self.name) == str.upper(currency_local.get()):
                currency_rate = 1
                return float(currency_rate)
            else:
                yahoo_financials_currencies = YahooFinancials(currencies)
                daily_currency_prices = yahoo_financials_currencies.get_historical_price_data(f"{today}", f"{today}","daily")
                currency_rate = daily_currency_prices[f'{str.upper(self.name)}{str.upper(currency_local.get())}=X']["prices"][0]["open"]
                return float(currency_rate)

        elif self.type == 'cryptocurrency':
            currencies_usdxxx = [f'USD{currency_local.get()}=X']
            yahoo_financials_currencies = YahooFinancials(currencies_usdxxx)
            daily_currency_prices = yahoo_financials_currencies.get_historical_price_data(f"{today}", f"{today}","daily")
            currency_rate_usdxxx = daily_currency_prices[f'USD{currency_local.get()}=X']["prices"][0]["open"]

            cryptocurrencies = [f'{str.upper(self.name)}-USD']
            yahoo_financials_cryptocurrencies = YahooFinancials(cryptocurrencies)
            daily_crypto_prices = yahoo_financials_cryptocurrencies.get_historical_price_data(f"{today}", f"{today}","daily")
            cryptocurrency_price_usd = daily_crypto_prices[f'{str.upper(self.name)}-USD']["prices"][0]["open"]
            cryptocurrency_price_local = currency_rate_usdxxx * cryptocurrency_price_usd
            return float(cryptocurrency_price_local)

    def value_total_local_curr(self):
        return float(self.amount * self.value_per_unit_local_curr())

"""
asset1_input = Assets('gbp', "currency", 1000)
asset2_input = Assets('usd', 'currency', 1000)
asset3_input = Assets('eth', 'cryptocurrency', 1)


op1 = ('2020-03-02', 'gbp', 500)
op2 = ('2020-03-03', 'gbp', -300)
op3 = ('2020-03-10', 'usd', 200)
op4 = ('2020-03-12', 'usd', 800)
op5 = ('2020-03-12', 'eth', 1)
op6 = ('2020-03-17', 'gbp', 300)
op7 = ('2020-03-18', 'gbp', 500)


asset1 = (asset1_input.name, asset1_input.type, asset1_input.amount, asset1_input.value_per_unit_local_curr(),
          asset1_input.value_total_local_curr())
asset2 = (asset2_input.name, asset2_input.type, asset2_input.amount, asset2_input.value_per_unit_local_curr(),
          asset2_input.value_total_local_curr())
asset3 = (asset3_input.name, asset3_input.type, asset3_input.amount, asset3_input.value_per_unit_local_curr(),
          asset3_input.value_total_local_curr())
"""


def current_execute():
    output = ''
    my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
    my_result = my_cursor.fetchall()
    legend = f"""Below you can see your current assets:

name, type, amount, value_per_unit_{str.lower(currency_local.get())}, value_total_{str.lower(currency_local.get())}"""
    for x in my_result:
        asset_input = Assets(f'{x[0]}', f'{x[1]}', f'{x[2]}')
        asset = (asset_input.name, asset_input.type, asset_input.amount, asset_input.value_per_unit_local_curr(), asset_input.value_total_local_curr())
        output += f"""{asset}
"""
    res = f'{legend} \n {output}'
    lbl.configure(text=res)



def new_win_add():
    new_win = Toplevel(root)
    new_win.geometry('500x400')

    global e_name_add
    display_name = Label(new_win, text="Type a code of new security that you would like to add. For example: USD/BTC/AAPL")
    display_name.grid(row=0, column=0)
    e_name_add = Entry(new_win, width=15, borderwidth=5)
    e_name_add.grid(row=1, column=0, padx=10, pady=10)

    global sec_type_add
    display_type = Label(new_win, text="Choose a  type of new security that you would like to add.")
    display_type.grid(row=3, column=0)
    sec_type_add = StringVar(new_win)
    sec_type_add.set("Choose")
    w = OptionMenu(new_win, sec_type_add, "shares", "bonds", "currency", "cryptocurrency")
    w.grid(row=4, column=0)

    global e_amount_add
    display_amount = Label(new_win, text="Type the amount of new security that you would like to add to your portfolio. > ")
    display_amount.grid(row=5, column=0)
    e_amount_add = Entry(new_win, width=15, borderwidth=5)
    e_amount_add.grid(row=6, column=0, padx=10, pady=10)

    btn_confirm = Button(new_win, text="Confirm", command=new_win_add_check)
    btn_cancel = Button(new_win, text="Cancel", command=new_win.destroy)
    btn_confirm.grid(row=8, column=0)
    btn_cancel.grid(row=9, column=0)


def new_win_add_check():
    e_name_get = str(e_name_add.get())
    e_amount_get = e_amount_add.get()
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    btn_ok = Button(new_win, text="Ok", command=new_win.destroy)
    btn_ok.grid(row=8, column=0)
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE name = '{e_name_get}'")
    msg = my_cursor.fetchone()
    sec_type_get = sec_type_add.get()

    if not e_name_get.isalpha():
        display_check_name = Label(new_win, text="Wrong security code. Only letters a-z allowed.")
        display_check_name.grid(row=1, column=0)
    elif len(e_name_get) > 4 or len(e_name_get) < 3:
        display_check_name = Label(new_win, text="Wrong security code. You should enter 3 or 4 characters.")
        display_check_name.grid(row=1, column=0)
    elif msg:
        display_check_name = Label(new_win, text=f"Security {str.upper(e_name_get)} is already included in your portfolio.")
        display_check_name.grid(row=1, column=0)
    elif sec_type_get == 'Choose':
        display_check_name = Label(new_win, text=f"You must select type of the security")
        display_check_name.grid(row=1, column=0)
    elif e_amount_get != 0:
        try:
            if int(e_amount_get) > 10 ** 15:
                display_check_amount = Label(new_win, text='Max 15 digits numbers are allowed in the "amount" field')
                display_check_amount.grid(row=1, column=0)
        except ValueError:
            display_check_amount = Label(new_win, text='Only numbers are allowed in the "amount" field')
            display_check_amount.grid(row=1, column=0)
        else:
            display_check_amount = Label(new_win, text=f'New security {e_name_get} has been added')
            display_check_amount.grid(row=1, column=0)
            asset_new_input = Assets(f'{e_name_get}', f'{sec_type_get}', f'{e_amount_get}')
            asset_new = (asset_new_input.name, asset_new_input.type, asset_new_input.amount)
            sql_formula = "INSERT INTO current_assets (name, type, amount) VALUES (%s, %s, %s)"
            my_cursor.execute(sql_formula, asset_new)
            operation_new = (f'{today}', f'{e_name_get}', f'{e_amount_get}')
            sql_formula = "INSERT INTO operations_history (date_op, name_op, amount_op) VALUES (%s, %s, %s)"
            my_cursor.execute(sql_formula, operation_new)
            mydb.commit()


def new_win_remove():
    new_win = Toplevel(root)
    new_win.geometry('500x400')

    global e_name_remove
    display_name = Label(new_win, text="Type a code of a security that you would like to remove. For example: USD/BTC/AAPL")
    display_name.grid(row=0, column=0)
    e_name_remove = Entry(new_win, width=15, borderwidth=5)
    e_name_remove.grid(row=1, column=0, padx=10, pady=10)

    btn_confirm = Button(new_win, text="Confirm", command=new_win_remove_check)
    btn_cancel = Button(new_win, text="Cancel", command=new_win.destroy)
    btn_confirm.grid(row=8, column=0)
    btn_cancel.grid(row=9, column=0)


def new_win_remove_check():
    e_name_remove_get = str(e_name_remove.get())
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    btn_ok = Button(new_win, text="Ok", command=new_win.destroy)
    btn_ok.grid(row=8, column=0)
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE name = '{e_name_remove_get}'")
    msg = my_cursor.fetchone()

    if not msg:
        display_check_name = Label(new_win, text=f"Security {str.upper(e_name_remove_get)} is not included in your portfolio.")
        display_check_name.grid(row=1, column=0)
    else:
        display_check_amount = Label(new_win, text=f'Security {e_name_remove_get} has been removed from your portfolio')
        display_check_amount.grid(row=1, column=0)
        my_cursor.execute(f'SELECT amount FROM my_portfolio.current_assets WHERE name = "{e_name_remove_get}"')
        my_result = my_cursor.fetchall()
        amount_to_be_deleted = my_result[0][0]
        operation_new = (f'{today}', f'{e_name_remove_get}', f'-{amount_to_be_deleted}')

        sql_formula = "INSERT INTO operations_history (date_op, name_op, amount_op) VALUES (%s, %s, %s)"
        my_cursor.execute(sql_formula, operation_new)

        sql_formula = f'DELETE FROM current_assets WHERE name = "{e_name_remove_get}"'
        my_cursor.execute(sql_formula)
        mydb.commit()


currency_local = StringVar(root)
currency_local.set("USD")
var = OptionMenu(root, currency_local, "USD", "EUR", "GBP", "JPY", "PLN")
var.grid(row=1, column=0)


btn1 = Button(root, text="Current Assets", command=current_execute)
btn2 = Button(root, text="Add Asset", command=new_win_add)
btn3 = Button(root, text="Remove Asset", command=new_win_remove)


btn1.grid(column=0, row=3)
btn2.grid(column=0, row=4)
btn3.grid(column=0, row=5)

root.mainloop()

# 26.03 notka do samego siebie,  trzeba ostro przemodelowac kod, wywalic z bazy danych 2 kolumny z prawej i zamiast tego zrobic tak, zeby liczyc je
# juz w samym programie, czyli poprostu w 2ga strone przeprowadzic operacje. w ten sposob pozbedziemy sie takze tych "roboczych" asset 1-3 ale to juz  jutro bo dzisiaj padam z nog







# command = str.lower(input('> '))
if command == "current":
    my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
    my_result = my_cursor.fetchall()
    print(
        f"""name, type, amount, value_per_unit_{str.lower(currency_local)}, value_total_{str.lower(currency_local)}""")
    for x in my_result:
        print(x)

elif command == "add":
    while True:
        e_name_get = mydb.converter.escape(str.lower(
            input("Please type a code of the security that you would like to add. For example: USD/BTC/AAPL > ")))
        if not e_name_get.isalpha():
            print("Error! Only letters a-z allowed")
        elif len(e_name_get) > 4:
            print("Error! Max 4 characters allowed")
        else:
            break
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE name = '{e_name_get}'")
    msg = my_cursor.fetchone()
    if not msg:
        while True:
            sec_type_get = mydb.converter.escape(str.lower(input(
                "Choose a type of the security that you would like to add to your portfolio: shares/bonds/currency/cryptocurrency > ")))
            if sec_type_get in ('shares', 'bonds', 'currency', 'cryptocurrency'):
                break
            else:
                print("Error! Only those 4 types are allowed: shares/bonds/currency/cryptocurrency")
        while True:
            e_amount_get = 0
            try:
                e_amount_get = mydb.converter.escape(
                    int(input("Type the amount of the security that you would like to add to your portfolio > ")))
            except ValueError:
                print("Error! Only numbers allowed")
                continue
            if e_amount_get > 10 ** 15:
                print("Error! Max 15 digits numbers allowed")
            else:
                break
        asset_new_input = Assets(f'{e_name_get}', f'{sec_type_get}', f'{e_amount_get}')
        asset_new = (asset_new_input.name, asset_new_input.type, asset_new_input.amount,
                     asset_new_input.value_per_unit_local_curr(), asset_new_input.value_total_local_curr())
        sql_formula = "INSERT INTO current_assets (name, type, amount) VALUES (%s, %s, %s"
        my_cursor.execute(sql_formula, asset_new)
        operation_new = (f'{today}', f'{e_name_get}', f'{e_amount_get}')
        sql_formula = "INSERT INTO operations_history (date_op, name_op, amount_op) VALUES (%s, %s, %s)"
        my_cursor.execute(sql_formula, operation_new)
        mydb.commit()
        print(f"""
Security {str.upper(e_name_get)} has been added to your portfolio!

Your portfolio currently consists of:

name, type, amount, value_per_unit_{str.lower(currency_local)}, value_total_{str.lower(currency_local)}
        """)

        my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
        my_result = my_cursor.fetchall()
        for x in my_result:
            print(x)
        print(list_of_commands)
    else:
        print(
            f"Security {str.upper(e_name_get)} is already included in your portfolio. Use 'edit' command to modify it.")

elif command == "remove":
    asset_to_delete = mydb.converter.escape(
        str.lower(input("Please type security name that you would like to remove > ")))
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE name = '{asset_to_delete}'")
    msg = my_cursor.fetchone()
    if not msg:
        print(f"Security {str.upper(asset_to_delete)} is not a part of your portfolio.")
    else:
        my_cursor.execute(f'SELECT amount FROM my_portfolio.current_assets WHERE name = "{asset_to_delete}"')
        my_result = my_cursor.fetchall()
        amount_to_be_deleted = my_result[0][0]
        operation_new = (f'{today}', f'{asset_to_delete}', f'-{amount_to_be_deleted}')
        sql_formula = "INSERT INTO operations_history (date_op, name_op, amount_op) VALUES (%s, %s, %s)"
        my_cursor.execute(sql_formula, operation_new)

        sql_formula = f'DELETE FROM current_assets WHERE name = "{asset_to_delete}"'
        my_cursor.execute(sql_formula)
        mydb.commit()
        print(f"""
Security {str.upper(asset_to_delete)} has been removed!

Your portfolio currently consists of:
        """)
        my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
        my_result = my_cursor.fetchall()
        for x in my_result:
            print(x)
        print(list_of_commands)

elif command == "edit":
    while True:
        name_edit = mydb.converter.escape(
            str.lower(input("Please type security name that you would like to amend > ")))
        if not name_edit.isalpha():
            print("Error! Only letters a-z allowed")
        elif len(name_edit) > 4:
            print("Error! Max 4 characters allowed")
        else:
            break
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE name = '{name_edit}'")
    msg = my_cursor.fetchone()
    if not msg:
        print(f"Security {str.upper(name_edit)} is not a part of your portfolio.")
    else:
        while True:
            add_or_subtract = str.lower(
                input("Would you like to add or subtract from your security? Type add/subtract > "))
            if add_or_subtract in ('add', 'subtract'):
                break
            else:
                print("Error! Only those 2 operation types are allowed: add/subtract")
        while True:
            amount_edit = 0
            try:
                amount_edit = mydb.converter.escape(abs(int(input("Please enter the amount > "))))
            except ValueError:
                print("Error! Only numbers allowed")
                continue
            if amount_edit > 10 ** 15:
                print("Error! Max 15 digits numbers allowed")
            else:
                break
        if add_or_subtract == 'subtract':
            amount_edit = amount_edit * (-1)
        sql_formula = f"UPDATE current_assets SET amount = (amount + {amount_edit}) WHERE name = '{name_edit}'"
        my_cursor.execute(sql_formula)

        operation_new = (f'{today}', f'{name_edit}', f'{amount_edit}')
        sql_formula = "INSERT INTO operations_history (date_op, name_op, amount_op) VALUES (%s, %s, %s)"
        my_cursor.execute(sql_formula, operation_new)
        mydb.commit()

        my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
        my_result = my_cursor.fetchall()
        for x in my_result:
            print(x)
        print(list_of_commands)

elif command == "export":
    my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
    my_result = my_cursor.fetchall()
    f = open('portfolio_export.csv', "a+")
    for x in my_result:
        output += f"""{str(x)}"""
    print(output)
    f.write(f'{output}')
    f.close()
    print("Your portfolio has been has been exported!")

elif command == "history":
    while True:
        historical_date = mydb.converter.escape(input('Enter a historical date in format YYYY/MM/DD > '))
        try:
            datetime.strptime(historical_date, '%Y/%m/%d')
        except ValueError:
            print('The date {} is invalid'.format(historical_date))
        else:
            break
    my_cursor.execute(
        f"SELECT name_op AS name, SUM(amount_op) AS amount_on_historical_date FROM my_portfolio.operations_history WHERE date_op <= '{historical_date}' GROUP BY name")
    my_result = my_cursor.fetchall()
    print("""
name, amount_on_historical_date
    """)
    for x in my_result:
        print(', '.join(map(str, x)))

    my_cursor.execute(f"SELECT * FROM my_portfolio.operations_history WHERE date_op <= '{historical_date}'")
    my_result = my_cursor.fetchall()
    print("""
Operations history:

date_op, name_op, amount_op
    """)
    for x in my_result:
        print(x[0], x[1], x[2])

elif command == "quit":
    print("""
Thank you for using My Portfolio application. See you soon!
    """)

else:
    pass
#    print(f"""
# Incorrect command. Please try again.
# {List_of_commands}
#    """)
