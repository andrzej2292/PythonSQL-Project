# required: tkinter, reportlab, YahooFinancials, mysql.connector, re, datetime
# upgrade pip
# sometimes during weekends YahooFinancials malfunctions - in this case it is advised to set "today" to last working day

from random import randrange
from tkinter import *
from datetime import datetime
from datetime import date
from yahoofinancials import YahooFinancials
import mysql.connector
import string
import random

mydb = mysql.connector.connect(user='root', password='MyNewPass',
                               host='127.0.0.1',
                               database='my_portfolio', auth_plugin='mysql_native_password')

today = date.today()
# today = '2020-03-25'
my_cursor = mydb.cursor(buffered=True)


class Assets:

    def __init__(self, username, name, type, amount):
        self.username = username
        self.name = name
        self.type = type
        self.amount = int(amount)

    def value_per_unit_local_curr(self):
        if self.type == 'currency':
            currencies = [f'{str.upper(self.name)}{str.upper(currency_local.get())}=X']
            if str.upper(self.name) == str.upper(currency_local.get()):
                currency_rate = 1
                return float(currency_rate)
            else:
                yahoo_financials_currencies = YahooFinancials(currencies)
                daily_currency_prices = yahoo_financials_currencies.get_historical_price_data(f"{today}", f"{today}", "daily")
                currency_rate = daily_currency_prices[f'{str.upper(self.name)}{str.upper(currency_local.get())}=X']["prices"][0]["open"]
                return float(currency_rate)

        elif self.type == 'cryptocurrency':
            currencies_usdxxx = [f'USD{currency_local.get()}=X']
            yahoo_financials_currencies = YahooFinancials(currencies_usdxxx)
            daily_currency_prices = yahoo_financials_currencies.get_historical_price_data(f"{today}", f"{today}","daily")
            currency_rate_usdxxx = daily_currency_prices[f'USD{currency_local.get()}=X']["prices"][0]["open"]

            cryptocurrencies = [f'{str.upper(self.name)}-USD']
            yahoo_financials_cryptocurrencies = YahooFinancials(cryptocurrencies)
            daily_crypto_prices = yahoo_financials_cryptocurrencies.get_historical_price_data(f"{today}", f"{today}","daily")
            cryptocurrency_price_usd = daily_crypto_prices[f'{str.upper(self.name)}-USD']["prices"][0]["open"]
            cryptocurrency_price_local = currency_rate_usdxxx * cryptocurrency_price_usd
            return float(cryptocurrency_price_local)

    def value_total_local_curr(self):
        return float(self.amount * self.value_per_unit_local_curr())


def password_generator(size=8, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))


def login():
    global root_login
    root_login = Tk()
    root_login.title("Welcome to Your Portfolio")

    global error_display
    error_display = Label(root_login, text="")
    error_display.grid(row=4, column=0)

    Button(root_login, text="Login", width=20, command=login_exe).grid(column=0, row=6)
    Button(root_login, text="Reset Password", width=20, command=password_reset).grid(column=0, row=7)
    Button(root_login, text="New User", width=20, command=login_exe).grid(column=0, row=8)

    global username_input
    Label(root_login, text="Enter your username").grid(row=0, column=0)
    username_input = Entry(root_login, width=15, borderwidth=5)
    username_input.grid(row=1, column=0, padx=10, pady=10)

    global password_input
    Label(root_login, text="Enter your password").grid(row=2, column=0)
    password_input = Entry(root_login, width=15, borderwidth=5)
    password_input.grid(row=3, column=0, padx=10, pady=10)


def password_reset():
    global new_win
    new_win = Toplevel(root_login)
    Label(new_win, text="Enter your email address").grid(row=0, column=0)
    Button(new_win, text='Reset password', command=password_reset_exe).grid(column=0, row=2)
    Button(new_win, text='Back', command=new_win.destroy).grid(column=0, row=3)

    global password_reset_email
    password_reset_email = Entry(new_win, width=15, borderwidth=5)
    password_reset_email.grid(row=1, column=0, padx=10, pady=10)


def password_reset_exe():
    password_reset_email_get = password_reset_email.get()
    my_cursor.execute(f"SELECT * FROM my_portfolio.user_data WHERE email = '{password_reset_email_get}'")
    my_result = my_cursor.fetchall()
    username = ''
    email = ''

    for x in my_result:
        username = x[0]
        email = x[2]

    if not email:
        error_display.configure(text="Email with new password has been sent")
    elif password_reset_email_get == email:
        new_win_2 = Toplevel(root_login)
        password = password_generator()
        sql_formula = f"UPDATE my_portfolio.user_data SET password = '{password}' WHERE username = '{username}'"
        my_cursor.execute(sql_formula)
        mydb.commit()
        Label(new_win_2, text=f'<This is a simulation of an email>\n\n\nHi {username}\n\nYour new password is "{password}"\n\nBest regards\nMy Portfolio Support').grid(row=0, column=0)
        Button(new_win_2, text='Close', command=new_win_2.destroy).grid(row=1, column=0)
        error_display.configure(text="Email with new password has been sent")
        new_win.destroy()
    else:
        error_display.configure(text="Email with new password has been sent")


def login_exe():
    username_input_get = username_input.get()
    password_input_get = password_input.get()
    global username
    username = ''
    password = ''

    my_cursor.execute(f"SELECT * FROM my_portfolio.user_data WHERE username = '{username_input_get}'")
    my_result = my_cursor.fetchall()

    for x in my_result:
        username = x[0]
        password = x[1]
        email = x[2]

    if not username:
        error_display.configure(text="Wrong username or password")
    elif username_input_get == username and password_input_get == password:
        main_menu()
        root_login.destroy()
    else:
        error_display.configure(text="Wrong username or password")


def main_menu():
    global root
    root = Tk()
    root.title(f"Welcome to Your Portfolio {username}")
    # root.geometry('500x500')
    global lbl
    lbl = Label(root, text="Choose your local currency:")
    lbl.grid(row=0, column=0)
    # e = Entry(root, width=15, borderwidth=5)
    # e.grid(row=1, column=0, padx=10, pady=10)
    # e.insert(0, "Choose your local currency")
    # txt = Entry(window, width=10)
    # txt.grid(column=1, row(column=0, row=0)=0)
    Button(root, text="Current Assets", width=20, command=current_execute).grid(column=0, row=3)
    Button(root, text="Add New Asset", width=20, command=new_win_add).grid(column=0, row=4)
    Button(root, text="Remove Asset", width=20, command=new_win_remove).grid(column=0, row=5)
    Button(root, text="Edit Your Portfolio", width=20, command=new_win_edit).grid(column=0, row=6)
    Button(root, text="View History", width=20, command=new_win_history).grid(column=0, row=7)
    Button(root, text="Export Data", width=20, command=new_win_export).grid(column=0, row=8)
    Button(root, text="Reset Changes", width=20, command=new_win_reset).grid(column=0, row=9)
    Button(root, text="Exit", width=20, command=new_win_exit).grid(column=0, row=10)

    global currency_local
    currency_local = StringVar(root)
    currency_local.set("USD")
    OptionMenu(root, currency_local, "USD", "EUR", "GBP", "JPY", "PLN").grid(row=1, column=0)


def current_execute():
    output = ''
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE username_ca = '{username}'")
    my_result = my_cursor.fetchall()
    legend = f"Below you can see your current assets:\n\nname, amount, exch_rate_{str.lower(currency_local.get())}, value_total_{str.lower(currency_local.get())}, type"

    for x in my_result:
        asset_input = Assets(f'{x[0]}', f'{x[1]}', f'{x[2]}', f'{x[3]}')
        asset = (asset_input.name, asset_input.type, asset_input.amount, round(asset_input.value_per_unit_local_curr(), 4), round(asset_input.value_total_local_curr(), 2))
        output += f"{asset[0]}  {asset[2]}  {asset[3]}  {asset[4]}  {asset[1]}\n"

    res = f'{legend}\n\n{output}'
    lbl.configure(text=res)


def new_win_add():
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    Button(new_win, text="Confirm", command=new_win_add_check).grid(row=8, column=0)
    Button(new_win, text="Close", command=new_win.destroy).grid(row=9, column=0)

    global e_name_add
    Label(new_win, text="Type a code of new security that you would like to add. For example: USD/BTC/AAPL").grid(row=0, column=0)
    e_name_add = Entry(new_win, width=15, borderwidth=5)
    e_name_add.grid(row=1, column=0, padx=10, pady=10)

    global sec_type_add
    display_type = Label(new_win, text="Choose a  type of new security that you would like to add.")
    display_type.grid(row=3, column=0)
    sec_type_add = StringVar(new_win)
    sec_type_add.set("Choose")
    OptionMenu(new_win, sec_type_add, "shares", "bonds", "currency", "cryptocurrency").grid(row=4, column=0)

    global e_amount_add
    Label(new_win, text="Type the amount of new security that you would like to add to your portfolio. > ").grid(row=5, column=0)
    e_amount_add = Entry(new_win, width=15, borderwidth=5)
    e_amount_add.grid(row=6, column=0, padx=10, pady=10)


def new_win_add_check():
    e_name_get = str(e_name_add.get())
    e_amount_get = e_amount_add.get()
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    Button(new_win, text="Ok", command=new_win.destroy).grid(row=8, column=0)
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE username_ca = '{username}' AND name = '{e_name_get}'")
    msg = my_cursor.fetchone()
    sec_type_get = sec_type_add.get()

    if not e_name_get.isalpha():
        Label(new_win, text="Wrong security code. Only letters a-z allowed.").grid(row=1, column=0)
    elif len(e_name_get) > 4 or len(e_name_get) < 3:
        Label(new_win, text="Wrong security code. You should enter 3 or 4 characters.").grid(row=1, column=0)
    elif msg:
        Label(new_win, text=f"Security {str.upper(e_name_get)} is already included in your portfolio.").grid(row=1, column=0)
    elif sec_type_get == 'Choose':
        Label(new_win, text=f"You must select type of the security").grid(row=1, column=0)
    else:
        try:
            if int(e_amount_get) > 10 ** 15:
                Label(new_win, text='Max 15 digits numbers are allowed in the "amount" field').grid(row=1, column=0)
            elif int(e_amount_get) <= 0:
                Label(new_win, text="Amount must be greater than zero").grid(row=1, column=0)
            else:
                Label(new_win, text=f'New security {str.upper(e_name_get)} has been added').grid(row=1, column=0)
                asset_new_input = Assets(f'{username}', f'{e_name_get}', f'{sec_type_get}', f'{e_amount_get}')
                asset_new = (asset_new_input.username, asset_new_input.name, asset_new_input.type, asset_new_input.amount)
                sql_formula = "INSERT INTO current_assets (username_ca, name, type, amount) VALUES (%s, %s, %s, %s)"
                my_cursor.execute(sql_formula, asset_new)
                operation_new = (f'{username}', f'{today}', f'{e_name_get}', f'{e_amount_get}')
                sql_formula = "INSERT INTO operations_history (username_op, date_op, name_op, amount_op) VALUES (%s, %s, %s, %s)"
                my_cursor.execute(sql_formula, operation_new)
                mydb.commit()
        except ValueError:
            display_check_amount = Label(new_win, text='Only numbers are allowed in the "amount" field')
            display_check_amount.grid(row=1, column=0)


def new_win_remove():
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    btn_confirm = Button(new_win, text="Confirm", command=new_win_remove_check)
    btn_close = Button(new_win, text="Close", command=new_win.destroy)
    btn_confirm.grid(row=8, column=0)
    btn_close.grid(row=9, column=0)

    global e_name_remove
    display_name = Label(new_win, text="Type a code of a security that you would like to remove. For example: USD/BTC/AAPL")
    display_name.grid(row=0, column=0)
    e_name_remove = Entry(new_win, width=15, borderwidth=5)
    e_name_remove.grid(row=1, column=0, padx=10, pady=10)


def new_win_remove_check():
    e_name_remove_get = str(e_name_remove.get())
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    btn_ok = Button(new_win, text="Ok", command=new_win.destroy)
    btn_ok.grid(row=8, column=0)
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE username_ca = '{username}' AND name = '{e_name_remove_get}'")
    msg = my_cursor.fetchone()

    if not msg:
        display_check_name = Label(new_win, text=f"Security {str.upper(e_name_remove_get)} is not a part of your portfolio.")
        display_check_name.grid(row=1, column=0)
    else:
        my_cursor.execute(f"SELECT amount FROM my_portfolio.current_assets WHERE username_ca = '{username}' AND name = '{e_name_remove_get}'")
        my_result = my_cursor.fetchall()
        amount_to_be_deleted = my_result[0][0]
        operation_new = (f'{username}', f'{today}', f'{e_name_remove_get}', f'-{amount_to_be_deleted}')

        sql_formula = "INSERT INTO operations_history (username_op, date_op, name_op, amount_op) VALUES (%s, %s, %s, %s)"
        my_cursor.execute(sql_formula, operation_new)

        sql_formula = f"DELETE FROM current_assets WHERE username_ca = '{username}' AND name = '{e_name_remove_get}'"
        my_cursor.execute(sql_formula)
        mydb.commit()
        Label(new_win, text=f'Security {e_name_remove_get} has been removed from your portfolio').grid(row=1, column=0)


def new_win_edit():
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    Button(new_win, text="Confirm", command=new_win_edit_check).grid(row=8, column=0)
    Button(new_win, text="Cancel", command=new_win.destroy).grid(row=9, column=0)

    global e_name_edit
    Label(new_win, text="Type a code of existing security that you would like to ammend. For example: USD/BTC/AAPL").grid(row=0, column=0)
    e_name_edit = Entry(new_win, width=15, borderwidth=5)
    e_name_edit.grid(row=1, column=0, padx=10, pady=10)

    global add_or_subtract_edit
    Label(new_win, text="Would you like to add or subtract?").grid(row=3, column=0)
    add_or_subtract_edit = StringVar(new_win)
    add_or_subtract_edit.set("Choose")
    OptionMenu(new_win, add_or_subtract_edit, "add", "subtract").grid(row=4, column=0)

    global e_amount_edit
    Label(new_win, text="Type the amount that you would like to add or subtract.").grid(row=5, column=0)
    e_amount_edit = Entry(new_win, width=15, borderwidth=5)
    e_amount_edit.grid(row=6, column=0, padx=10, pady=10)


def new_win_edit_check():
    e_name_edit_get = e_name_edit.get()
    add_or_subtract_edit_get = add_or_subtract_edit.get()
    e_amount_edit_get = e_amount_edit.get()
    new_win = Toplevel(root)
    Button(new_win, text="Ok", command=new_win.destroy).grid(row=8, column=0)
    my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE username_ca = '{username}' AND name = '{e_name_edit_get}'")
    msg = my_cursor.fetchone()

    if add_or_subtract_edit_get == 'subtract':
        e_amount_edit_get = abs(int(e_amount_edit_get)) * (-1)
    else:
        e_amount_edit_get = abs(int(e_amount_edit_get))
    if not e_name_edit_get.isalpha():
        Label(new_win, text="Wrong security code. Only letters a-z allowed.").grid(row=1, column=0)
    elif len(e_name_edit_get) > 4 or len(e_name_edit_get) < 3:
        Label(new_win, text="Wrong security code. You should enter 3 or 4 characters.").grid(row=1, column=0)
    elif not msg:
        Label(new_win, text=f"Security {str.upper(e_name_edit_get)} is not a part of your portfolio..").grid(row=1, column=0)
    elif add_or_subtract_edit_get == 'Choose':
        Label(new_win, text=f"Choose if you would like to add or subtract").grid(row=1, column=0)
    else:
        try:
            if abs(int(e_amount_edit_get)) > 10 ** 15:
                Label(new_win, text='Max 15 digits numbers are allowed in the "amount" field').grid(row=1, column=0)
            elif int(e_amount_edit_get) == 0:
                Label(new_win, text="Amount can't zero").grid(row=1, column=0)
            else:
                sql_formula = f"UPDATE current_assets SET amount = (amount + {e_amount_edit_get}) WHERE username_ca = '{username}' AND name = '{e_name_edit_get}'"
                my_cursor.execute(sql_formula)
                operation_new = (f'{username}', f'{today}', f'{e_name_edit_get}', f'{e_amount_edit_get}')
                sql_formula = "INSERT INTO operations_history (username_op, date_op, name_op, amount_op) VALUES (%s, %s, %s, %s)"
                my_cursor.execute(sql_formula, operation_new)
                mydb.commit()
                Label(new_win, text=f'Security {e_name_edit_get} has been amended').grid(row=1, column=0)
        except ValueError:
            Label(new_win, text='Only numbers are allowed in the "amount" field').grid(row=1, column=0)


def new_win_history():
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    Label(new_win, text="Here you can check status of your portfolio on particular day in the past.\n Enter a historical date in format YYYY/MM/DD.").grid(row=0, column=0)
    Button(new_win, text="Confirm", command=new_win_history_check).grid(row=2, column=0)
    Button(new_win, text="Cancel", command=new_win.destroy).grid(row=3, column=0)

    global e_history_date
    e_history_date = Entry(new_win, width=15, borderwidth=5)
    e_history_date.grid(row=1, column=0, padx=10, pady=10)


def new_win_history_check():
    e_history_date_get = e_history_date.get()
    new_win = Toplevel(root)
    Button(new_win, text="Ok", command=new_win.destroy).grid(row=8, column=0)
    output = ''
    try:
        datetime.strptime(e_history_date_get, '%Y/%m/%d')
        my_cursor.execute(f"SELECT name_op AS name, SUM(amount_op) AS amount_on_historical_date FROM my_portfolio.operations_history WHERE username_op = '{username}' AND date_op <= '{e_history_date_get}' GROUP BY name")
        my_result = my_cursor.fetchall()

        for x in my_result:
            output += f"{x[0]} {x[1]}\n"

        legend = f"On {e_history_date_get} your portfolio consisted of:"
        res = f'{legend} \n {output}'
        Label(new_win, text=res).grid(row=1, column=0)
    except ValueError:
        Label(new_win, text='The date {} is invalid'.format(e_history_date_get)).grid(row=1, column=0)


def new_win_export():
    new_win = Toplevel(root)
    Label(new_win, text="Choose file type:").grid(row=0, column=0)
    Button(new_win, text="Confirm", command=new_win_export_exe).grid(row=2, column=0)
    Button(new_win, text="Cancel", command=new_win.destroy).grid(row=3, column=0)

    global file_type
    file_type = StringVar(new_win)
    file_type.set("Choose")
    OptionMenu(new_win, file_type, "csv", "pdf").grid(row=1, column=0)


def new_win_export_exe():
    file_type_get = file_type.get()
    new_win = Toplevel(root)
    Button(new_win, text="Ok", command=new_win.destroy).grid(row=8, column=0)

    if file_type_get == "csv":
        my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE username_ca = '{username}'")
        my_result = my_cursor.fetchall()
        f = open(f'portfolio_export_{today}.csv', "a+")
        for row in my_result:
            for column in row:
                f.write('%s;' % column)
            f.write('\n')
        f.close()
        Label(new_win, text='Your portfolio has been has been exported.').grid(row=0, column=0)
    elif file_type_get == "pdf":
        pass
    elif file_type_get == "choose":
        Label(new_win, text='Choose file type').grid(row=0, column=0)
    else:
        Label(new_win, text='Oops! Something went wrong!').grid(row=0, column=0)


def new_win_reset():
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    Label(new_win, text="Are you sure that you want to revert changes made today?\nYour portfolio will be reset to the state from yesterday.\n").grid(row=0, column=0)
    Button(new_win, text="Confirm", command=new_win_reset_exe).grid(row=2, column=0)
    Button(new_win, text="Cancel", command=new_win.destroy).grid(row=3, column=0)


def new_win_reset_exe():
    # nie jestem w stanie przywrocic elementu ktory na stale usunallem funkca remove asset, musze to naprawic
    new_win = Toplevel(root)
    # new_win.geometry('500x400')
    Button(new_win, text="Ok", command=new_win.destroy).grid(row=8, column=0)

    my_cursor.execute(f"SELECT * FROM my_portfolio.operations_history WHERE username_op = '{username}' AND date_op = CURDATE();")
    my_result = my_cursor.fetchall()

    for x in my_result:
        operation_reset_name = x[2]
        operation_reset_amount = x[3]

        sql_formula = f"UPDATE current_assets SET amount = (amount - {operation_reset_amount}) WHERE username_ca = '{username}' AND name = '{operation_reset_name}'"
        my_cursor.execute(sql_formula)
    my_cursor.execute(f"DELETE FROM my_portfolio.operations_history WHERE username_op = '{username}' AND date_op = CURDATE();")
    mydb.commit()

    Label(new_win, text="Your portfolio has been reset to the state from yesterday.\n").grid(row=0, column=0)


def new_win_exit():
    new_win = Toplevel(root)
    display_reset_info = Label(new_win, text="Are you sure you want to quit?")
    display_reset_info.grid(row=0, column=0)
    Button(new_win, text="Confirm", command=new_win_exit_exe).grid(row=2, column=0)
    Button(new_win, text="Cancel", command=new_win.destroy).grid(row=3, column=0)


def new_win_exit_exe():
    root.destroy()


login()
root_login.mainloop()
