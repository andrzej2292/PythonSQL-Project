# required: tkinter, reportlab, YahooFinancials, mysql.connector
# upgrade pip

# creation of 2 below tables should be executed in MySQL:
# CREATE TABLE current_assets (
# name varchar(50),
# type varchar(50),
# amount int,
# value_per_unit_local_curr float,
# value_total_local_curr float
# last_modified_date date);
#
# CREATE TABLE operations_history (
# date_op date,
# name_op varchar(50),
# amount_op int);

from datetime import date
from yahoofinancials import YahooFinancials
import mysql.connector

mydb = mysql.connector.connect(user='root', password='MyNewPass',
                               host='127.0.0.1',
                               database='my_portfolio', auth_plugin='mysql_native_password')
output = ''
my_cursor = mydb.cursor(buffered=True)
command = ""
help = """
Enter:
"current" to display all your current assets
"add" to add the new asset
"remove" to remove the existing asset
"edit" to amend the existing asset
"reset" to reset all assets to default values
"export" to export current assets to CSV file
"quit" to close the program
"""

today = date.today()
currency_local = str.upper(input('Please enter your local currency code: '))
currencies_usdxxx = [f'USD{currency_local}=X']
yahoo_financials_currencies = YahooFinancials(currencies_usdxxx)
daily_currency_prices = yahoo_financials_currencies.get_historical_price_data(f"{today}", f"{today}", "daily")
currency_rate_usdxxx = daily_currency_prices[f'USD{currency_local}=X']["prices"][0]["open"]


class Assets:

    def __init__(self, name, type, amount):
        self.name = name
        self.type = type
        self.amount = int(amount)

    def value_per_unit_local_curr(self):
        today = date.today()
        if self.type == 'currency':
            currencies = [f'{str.upper(self.name)}{str.upper(currency_local)}=X']
            if str.upper(self.name) == str.upper(currency_local):
                currency_rate = 1
                return float(currency_rate)
            else:
                yahoo_financials_currencies = YahooFinancials(currencies)
                daily_currency_prices = yahoo_financials_currencies.get_historical_price_data(f"{today}", f"{today}", "daily")
                currency_rate = daily_currency_prices[f'{str.upper(self.name)}{str.upper(currency_local)}=X']["prices"][0]["open"]
                return float(currency_rate)

        elif self.type == 'cryptocurrency':
            cryptocurrencies = [f'{str.upper(self.name)}-USD']
            yahoo_financials_cryptocurrencies = YahooFinancials(cryptocurrencies)
            daily_crypto_prices = yahoo_financials_cryptocurrencies.get_historical_price_data(f"{today}", f"{today}", "daily")
            cryptocurrency_price_usd = daily_crypto_prices[f'{str.upper(self.name)}-USD']["prices"][0]["open"]
            cryptocurrency_price_local = currency_rate_usdxxx * cryptocurrency_price_usd
            return float(cryptocurrency_price_local)

    def value_total_local_curr(self):
        return float(self.amount * self.value_per_unit_local_curr())


asset1_input = Assets('gbp', "currency", 1000)
asset2_input = Assets('usd', 'currency', 1000)
asset3_input = Assets('eth', 'cryptocurrency', 1)

asset1 = (asset1_input.name, asset1_input.type, asset1_input.amount, asset1_input.value_per_unit_local_curr(), asset1_input.value_total_local_curr())
asset2 = (asset2_input.name, asset2_input.type, asset2_input.amount, asset2_input.value_per_unit_local_curr(), asset2_input.value_total_local_curr())
asset3 = (asset3_input.name, asset3_input.type, asset3_input.amount, asset3_input.value_per_unit_local_curr(), asset3_input.value_total_local_curr())

print(f"""
Welcome to your assets manager tool!

Below you can see your current assets:

name, type, amount, value_per_unit_{str.lower(currency_local)}, value_total_{str.lower(currency_local)}
""")

my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
my_result = my_cursor.fetchall()
for x in my_result:
    print(x)

print(help)




while True:
    command = str.lower(input('> '))
    if command == "current":
        my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
        my_result = my_cursor.fetchall()
        print(f"""name, type, amount, value_per_unit_{str.lower(currency_local)}, value_total_{str.lower(currency_local)}""")
        for x in my_result:
            print(x)

    elif command == "add":
        name_new = str.lower(input("Please type a code of the security that you would like to add. For example: USD/BTC/AAPL > "))
        mydb.converter.escape(name_new)
        my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE name = '{name_new}'")
        msg = my_cursor.fetchone()
        if not msg:
            type_new = str.lower(input("Choose a type of the security that you would like to add to your portfolio: shares/bonds/currency/cryptocurrency > "))
            mydb.converter.escape(type_new)
            amount_new = int(input("Type the amount of the security that you would like to add to your portfolio > "))
            mydb.converter.escape(amount_new)
            asset_new_input = Assets(f'{name_new}', f'{type_new}', f'{amount_new}')
            asset_new = (asset_new_input.name, asset_new_input.type, asset_new_input.amount, asset_new_input.value_per_unit_local_curr(), asset_new_input.value_total_local_curr())
            sql_formula = "INSERT INTO current_assets (name, type, amount, value_per_unit_local_curr, value_total_local_curr) VALUES (%s, %s, %s, %s, %s)"
            my_cursor.execute(sql_formula, asset_new)
            operation_new = (f'{today}', f'{name_new}', f'{amount_new}')
            sql_formula = "INSERT INTO operations_history (date_op, name_op, amount_op) VALUES (%s, %s, %s)"
            my_cursor.execute(sql_formula, operation_new)
            mydb.commit()
            print(f"""
Security {str.upper(name_new)} has been added to  your portfolio!
    
Your portfolio currently consists of:

name, type, amount, value_per_unit_{str.lower(currency_local)}, value_total_{str.lower(currency_local)}
            """)

            my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
            my_result = my_cursor.fetchall()
            for x in my_result:
                print(x)
            print(help)
        else:
            print(f"Security {str.upper(name_new)} is already included in your portfolio. Use 'edit' command to modify it.")

    elif command == "remove":
        asset_to_delete = str.lower(input("Please type security name that you would like to remove > "))
        mydb.converter.escape(asset_to_delete)
        my_cursor.execute(f"SELECT * FROM my_portfolio.current_assets WHERE name = '{asset_to_delete}'")
        msg = my_cursor.fetchone()
        if not msg:
            print(f"Security {str.upper(asset_to_delete)} is not a part of your portfolio.")
        else:
            my_cursor.execute(f'SELECT amount FROM my_portfolio.current_assets WHERE name = "{asset_to_delete}"')
            my_result = my_cursor.fetchall()
            amount_to_be_deleted = my_result[0][0]
            operation_new = (f'{today}', f'{asset_to_delete}', f'-{amount_to_be_deleted}')
            sql_formula = "INSERT INTO operations_history (date_op, name_op, amount_op) VALUES (%s, %s, %s)"
            my_cursor.execute(sql_formula, operation_new)

            sql_formula = f'DELETE FROM current_assets WHERE name = "{asset_to_delete}"'
            my_cursor.execute(sql_formula)
            mydb.commit()
            print(f"""
Security {str.upper(asset_to_delete)} has been removed!

Your portfolio currently consists of:
            """)
            my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
            my_result = my_cursor.fetchall()
            for x in my_result:
                print(x)
            print(help)

    elif command == "edit":
        name_edit = str.lower(input("Please type security name that you would like to amend > "))
        mydb.converter.escape(name_edit)
        add_or_subtract = str.lower(input("Would you like to add or subtract from your security? Type add/subtract > "))
        amount_edit = int(input("Please type the amount that you would like to add or subtract > "))
        mydb.converter.escape(amount_edit)
        sql_formula = f"UPDATE current_assets SET amount = (amount + {amount_edit}) WHERE name = '{name_edit}'"
        my_cursor.execute(sql_formula)

        mydb.commit()
        my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
        my_result = my_cursor.fetchall()
        for x in my_result:
            print(x)
        print(help)

    elif command == "reset":
        my_cursor.execute("TRUNCATE TABLE current_assets;")

        sql_formula = "INSERT INTO current_assets (name, type, amount, value_per_unit_local_curr, value_total_local_curr) VALUES (%s, %s, %s, %s, %s)"
        my_cursor.execute(sql_formula, asset1)
        my_cursor.execute(sql_formula, asset2)
        my_cursor.execute(sql_formula, asset3)
        mydb.commit()

        print("""
Your portfolio has been has been reset!

Your portfolio currently consists of:
        """)
        my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
        my_result = my_cursor.fetchall()
        for x in my_result:
            print(x)

    elif command == "export":
        my_cursor.execute("SELECT * FROM my_portfolio.current_assets")
        my_result = my_cursor.fetchall()
        f = open('portfolio_export.csv', "a+")

        for x in my_result:
            output += f"""{str(x)}"""
        print(output)
        f.write(f'{output}')
        f.close()
        print("Your portfolio has been has been exported!")

    elif command == "quit":
        break

    else:
        print(f"""
Incorrect command. Please try again. 
{help}
        """)
